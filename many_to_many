1.
CREATE TABLE IF NOT EXISTS courses (
	course_id INTEGER PRIMARY KEY AUTOINCREMENT,
	topic TEXT NOT NULL,
	hours REAL NOT NULL
);


CREATE TABLE IF NOT EXISTS students (
	student_id INTEGER PRIMARY KEY AUTOINCREMENT,
	name TEXT NOT NULL,
	email TEXT NOT NULL
);


CREATE TABLE IF NOT EXISTS grades (
	course_student_id INTEGER PRIMARY KEY AUTOINCREMENT,
	student_id INTEGER NOT NULL,
	course_id INTEGER NOT NULL,
	grade INTEGER NOT NULL,
	UNIQUE(student_id,course_id),
	FOREIGN KEY (student_id) REFERENCES students (student_id)
	FOREIGN KEY (course_id) REFERENCES courses (course_id)
);


2.
INSERT INTO courses (topic, hours) VALUES ('Mathematics', 50);
INSERT INTO courses (topic, hours) VALUES ('Computer Science', 60);
INSERT INTO courses (topic, hours) VALUES ('Physics', 40);
INSERT INTO courses (topic, hours) VALUES ('Chemistry', 45);
INSERT INTO courses (topic, hours) VALUES ('Biology', 55);


INSERT INTO students (name, email) VALUES ('John Doe', 'john.doe@example.com');
INSERT INTO students (name, email) VALUES ('Jane Smith', 'jane.smith@example.com');
INSERT INTO students (name, email) VALUES ('David Cohen', 'david.cohen@example.com');
INSERT INTO students (name, email) VALUES ('Maya Levi', 'maya.levi@example.com');
INSERT INTO students (name, email) VALUES ('Omer Goldstein', 'omer.goldstein@example.com');


INSERT INTO grades (student_id, course_id, grade) VALUES (1, 1, 85);
INSERT INTO grades (student_id, course_id, grade) VALUES (1, 2, 90);
INSERT INTO grades (student_id, course_id, grade) VALUES (1, 3, 78);
INSERT INTO grades (student_id, course_id, grade) VALUES (1, 4, 88);
INSERT INTO grades (student_id, course_id, grade) VALUES (1, 5, 92);
INSERT INTO grades (student_id, course_id, grade) VALUES (2, 1, 76);
INSERT INTO grades (student_id, course_id, grade) VALUES (2, 2, 82);
INSERT INTO grades (student_id, course_id, grade) VALUES (2, 3, 88);
INSERT INTO grades (student_id, course_id, grade) VALUES (2, 4, 84);
INSERT INTO grades (student_id, course_id, grade) VALUES (2, 5, 91);
INSERT INTO grades (student_id, course_id, grade) VALUES (3, 1, 92);
INSERT INTO grades (student_id, course_id, grade) VALUES (3, 2, 87);
INSERT INTO grades (student_id, course_id, grade) VALUES (3, 3, 81);
INSERT INTO grades (student_id, course_id, grade) VALUES (3, 4, 75);
INSERT INTO grades (student_id, course_id, grade) VALUES (3, 5, 80);
INSERT INTO grades (student_id, course_id, grade) VALUES (4, 1, 80);
INSERT INTO grades (student_id, course_id, grade) VALUES (4, 2, 85);
INSERT INTO grades (student_id, course_id, grade) VALUES (4, 3, 90);
INSERT INTO grades (student_id, course_id, grade) VALUES (4, 4, 78);
INSERT INTO grades (student_id, course_id, grade) VALUES (4, 5, 86);
INSERT INTO grades (student_id, course_id, grade) VALUES (5, 1, 91);
INSERT INTO grades (student_id, course_id, grade) VALUES (5, 2, 94);
INSERT INTO grades (student_id, course_id, grade) VALUES (5, 3, 80);
INSERT INTO grades (student_id, course_id, grade) VALUES (5, 4, 83);
INSERT INTO grades (student_id, course_id, grade) VALUES (5, 5, 89);


3.
SELECT c.topic AS course_topic, AVG(g.grade) AS average_grade
FROM grades g
JOIN courses c ON g.course_id = c.course_id
GROUP BY c.course_id;

לא חייב להשתמש ב- join
אפשר לכתוב גם ככה אך בשאילתא הזו לא רואים את שמות הקורסים
SELECT g.course_id, AVG(g.grade) AS average_grade
FROM grades g
GROUP BY g.course_id;

